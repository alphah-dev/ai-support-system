-- backend/database/schema.sql

-- Stores customer tickets
CREATE TABLE IF NOT EXISTS tickets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT NOT NULL,
    customer_email TEXT,
    subject TEXT NOT NULL,
    body TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'Open', -- e.g., Open, In Progress, Resolved, Closed, Escalated
    priority TEXT DEFAULT 'Medium',      -- e.g., Low, Medium, High, Urgent
    assigned_agent_id INTEGER,          -- Foreign key to an agents table (if needed)
    assigned_team TEXT,                 -- Team assigned by routing agent
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    resolved_at DATETIME,
    summary TEXT,                       -- Generated by Summarization Agent
    extracted_actions TEXT,             -- JSON list of actions from Summarization Agent
    predicted_resolution_time INTEGER,  -- In minutes/hours, from Prediction Agent
    resolution_details TEXT,            -- How the ticket was resolved
    feedback_rating INTEGER,            -- Agent/Customer feedback on resolution (1-5)
    feedback_comment TEXT,
    -- Foreign key constraint (optional but recommended if 'agents' table is actively used)
    FOREIGN KEY (assigned_agent_id) REFERENCES agents(id)
);

-- Stores historical resolutions and knowledge base articles for recommendation
CREATE TABLE IF NOT EXISTS knowledge_base (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    keywords TEXT,                      -- Comma-separated keywords
    embedding BLOB,                     -- Store vector embeddings (BLOB for SQLite, other types for different DBs)
    source_ticket_id INTEGER,           -- Optional: Link to ticket that generated this entry
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    success_rate REAL DEFAULT 0.5,      -- How often this resolution worked (0.0 to 1.0)
    usage_count INTEGER DEFAULT 0       -- How many times this has been used/recommended
);

-- Stores agent information (simplified)
CREATE TABLE IF NOT EXISTS agents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    skills TEXT,                        -- Comma-separated skills (e.g., "Billing,API,Python")
    current_load INTEGER DEFAULT 0,     -- Number of currently assigned tickets/tasks
    is_available BOOLEAN DEFAULT TRUE   -- Real-time availability status
);

-- Trigger to update 'updated_at' timestamp on ticket changes
-- Ensures the updated_at field automatically reflects the last modification time
CREATE TRIGGER IF NOT EXISTS update_ticket_timestamp
AFTER UPDATE ON tickets
FOR EACH ROW
BEGIN
    UPDATE tickets SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

-- Indexes for faster lookups on commonly queried columns
CREATE INDEX IF NOT EXISTS idx_ticket_status ON tickets(status);
CREATE INDEX IF NOT EXISTS idx_ticket_assigned_agent ON tickets(assigned_agent_id);
CREATE INDEX IF NOT EXISTS idx_ticket_created_at ON tickets(created_at);
CREATE INDEX IF NOT EXISTS idx_kb_keywords ON knowledge_base(keywords);
CREATE INDEX IF NOT EXISTS idx_agent_email ON agents(email);